#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'fog'
require 'open-uri'
require 'trollop'
require 'pp'
$: << File.join(File.dirname(__FILE__), "../lib")
require 'ec2_instance_identifier'


DEBUG=false

def log what
  puts what if DEBUG
end
# 
class SnapshotRestorer
  attr_accessor :snaps
  def initialize(aki, sak)
    @compute = Fog::Compute.new({:provider => 'AWS', :aws_access_key_id => aki, :aws_secret_access_key => sak})
    @snaps = []
    @volumes = []
  end
  def find_snapshots(instance_id, kind = 'snapshot')
    log "Looking for snapshots for #{instance_id}"
    volume_map = []
    snapshots = {}

    tags = @compute.tags.all(:key => 'instance_id', :value => instance_id)

    max_date = nil
    tags.each do |tag|
      snap = @compute.snapshots.get(tag.resource_id)
      t =  snap.tags

      # Ignore in progress snapshots
      if instance_id == t['instance_id'] && 
          snap.state == 'completed' &&
          t['kind'] == kind
        max_date = t['date'] if !max_date || max_date < t['date']
        log "#{snap.inspect} is valid"
        snapshots[t['date']] ||= []
        snapshots[t['date']] << snap
      end
    end
    snapshots['LATEST'] = snapshots[max_date] if snapshots[max_date]
    return snapshots
  end
  def prepare_volumes(dest_instance)
    @snaps.each do | resource_id |
      snap = @compute.snapshots.get(resource_id)
      # Snap have the following tags
      # application
      # device
      # instance_id
      # date
      # kind

      t =  snap.tags
      volume = @compute.volumes.new :snapshot_id => snap.id, :size => snap.volume_size, :availability_zone => 'us-east-1c'
      volume.save
      volume.reload
      @compute.create_tags(volume.id, { "application" => t['application'],
        "sdevice" => t['device'],
        "date" => t['date'],
        "kind" => t['kind'],
        "sinstance" => t['instance_id'],
        "dinstance" =>  dest_instance})
      
      @volumes << volume
    end
  end
  def rattach_volumes(base_device = nil)
    dest = base_device
    if !dest
      dest = @volumes.map{ |v| v.tags['sdevice']}.min
    end
    dest = dest.dup

    @volumes.each do |vol|
      vol.reload
      puts "Attaching #{vol.id} to #{dest} on #{vol.tags['dinstance']}"
      @compute.attach_volume(vol.tags['dinstance'], vol.id, dest)
      dest.next!
    end
  end
  def find_volume_for_instance_and_snapshots(dest_instance)
    vols = []
    @snaps.each do | resource_id |
      @compute.volumes.all().each do |volume|
        if volume.server_id == dest_instance &&
          volume.snapshot_id == resource_id
          vols << volume
        end
      end
    end
    return vols
  end
  def detach_snapshots(dest_instance)
    vols = find_volume_for_instance_and_snapshots(dest_instance)
    if vols.length == 0
      puts "Nothing to detach!"
      return
    end
    vols.each { |v|
      v.force_detach()
    }
    puts "Waiting for volumes to be detached"
    vols.each do |v|
      begin
        sleep(3)
        v.reload
      end while v.state == 'in-use'
      puts "#{v.id} is detached"
      v.destroy()
    end
  end
end


opts = Trollop::options do
  opt :hostname, "Hostname tag to use to find the instance", :type => :string, :required => true
  opt :access_key_id, "Access Key Id for AWS", :type => :string, :required => true
  opt :secret_access_key, "Secret Access Key for AWS", :type => :string, :required => true
  opt :date, "Date to restore, use LATEST to take latest data", :type => :string
  opt :type, "Snapshot type to restore, defaults to snapshot", :type => :string, :default => 'snapshot'
  opt :target, "Creates volume ready for mounting on instance id. Use special value SELF to restore here", :type => :string
  opt :first_device, "First device to attach to (default is to use source first device) /dev/sdx", :type => :string
  opt :action, 'Action', :default => 'attach'
end
  
finder = EC2InstanceIdentifier.new(opts[:access_key_id], opts[:secret_access_key])
instance_identifier = finder.get_instance(opts[:hostname]).id
s = SnapshotRestorer.new(opts[:access_key_id], opts[:secret_access_key])

# Find this instance snapshots
snaps = s.find_snapshots(instance_identifier, opts[:type])

if ! opts[:date] || !snaps.has_key?(opts[:date])
  puts "We have found the following snapshot's dates:"
  snaps.each do |k,v|
    puts "- #{k} (#{v.length} volume snapshots)"
  end
else
  puts "Snapshot taken at #{opts[:date]}"
  snaps[opts[:date]].each do |snapshot|
    puts "- #{snapshot.id}, #{snapshot.volume_size}GB - #{snapshot.tags['device']}"
  end
  if opts[:target]
    s.snaps = snaps[opts[:date]].map{ |s| s.id }
    target = opts[:target]
    target = open("http://169.254.169.254/latest/meta-data/instance-id").read if target == "SELF"
    if opts[:action] == 'attach'
      if !opts[:first_device]
        raise "First device has to be indicated"
      end
      puts "Preparing volumes for instance #{target}"
      s.prepare_volumes(target)
      # Need to clone, because trollop freeze the variable

      s.rattach_volumes(opts[:first_device])
    elsif opts[:action] == 'destroy'
      s.detach_snapshots(target)
    end
  end
end

